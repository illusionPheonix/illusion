1 什么是vue？ (了解)
    "渐进式" 的javaScript框架
     "渐进式" : 学一点用一点 学习曲线比较缓和

     优点：
        高效（虚拟DOM）
        灵活(组件化开发方式)
        强大的表达式 {{  }}
        强大的指令系统
        数据 和 视图 “双向绑定”


2 Vue的安装
    1）下载vue.js文件 直接引入即可
    2）在vue-cli脚手架中安装 （明天讲解）


3 Vue的入门(掌握)
    1）入门使用步骤
        a) 引入vue
        b) 准备视图
        c) 创建vue实例对象

    2）数据双向绑定
        v-model 绑定的数据 是双向的 
        双向： v-model绑定的输入框input中的值改变 会影响Vue实例对象中data的值
               Vue实例对象中data的值改变 会影响 v-model绑定的输入框input的值

    3）el配置选项
        el主要用于挂载dom 可以写 "#ID名" 或  ".类名"  或 选择器
        注意***： 工作中都直接使用 ID

    4）data配置选项
        data配置选项 主要用于准备数据

    5）methods 配置选项
        methods 选项 用于写函数
        注意***： methods中函数的 this 指向 当前创建出来的vue实例对象

4 Vue的表达式
    1）表达式的作用： 我们需要把vue实例对象data中的数据，渲染（输出）到视图中，就可以使用表达式
    2）表达式的写法：  {{ 表达式 }}

    3）几种表达式
        a) 简单表达式 
        b) 输出数字
        c) 输出字符串
        d) 输出对象
        d) 输出数组
            注意***： 数组有7个变异方法
                push()
                pop()
                shift()
                unshift()
                splice()
                sort()
                reverse()

    注意***： 表达式虽然可以写计算操作，但是一般都是直接输出变量，所有的计算过程，请放在"函数"中或者"计算属性"中

5 Vue指令 （掌握）
    Vue的指令，主要用于把数据输出到页面（视图）
    所有的vue指令，都是以 “v-” 为前缀

    1）v-text & v-html
        表达式和v-text都不能解析html标签
        v-html可以解析html标签

    2）v-show & v-if
        v-show： 主要是切换元素的 display 属性来控制显示和隐藏
        v-if:    如果是假 直接删除dom 如果是真 重新渲染dom

        如果是频繁的切换显示和隐藏： v-show 
        如果基本不怎么切换： v-if

    3) v-if & v-else-if & v-else
         如果满足条件就渲染dom 不满足就不渲染
         而且只要代码从上往下 只要找到一个满足条件的 就不会继续查找

    4) v-for 
        主要用于循环 可以循环数组 & 对象 & 数字 & 字符串

        // 循环数组
        <标签 v-for="(item, index) in arr"></标签>

        参数说明: 
            arr：  要循环的数组
            item:  循环出来的每一项的值
            index: 循环出来的索引
            in:    操作符

        // 循环对象
         <标签 v-for="(item, key, index) in obj"></标签>
         参数说明: 
            obj:   要循环的对象
            item:  循环出来的每一项的值
            key:   循环出来的每一项的 键名
            index: 循环出来的每一项的索引
            in:    操作符

        注意： （key, index）都是可选的 一般item是必须的

    5) v-bind
        1） v-bind的作用: 主要是把数据 绑定到标签的属性上
        2)  写法
            <标签 v-bind:属性名="表达式"></标签>

            简写：
            <标签 :属性名="表达式"></标签>

        3）v-bind绑定 class
            <标签 :class="{类1: flag1, 类2: flag2}"></标签>

            如果flag1是true 那么就有类1 否则就没有
            如果flag2是true 那么就有类2 否则就没有

        4) v-bind绑定 style
             <标签 :style="{属性名1: 样式值1, 属性名2: 样式值2}"></标签>

    6) v-model : 双向数据绑定 主要用于获取用户输入的数据
        a) v-model可以用于以下标签中： 
                <input>
                <select>
                <textarea>

        b) v-model的修饰符
            .lazy -   取代 input 监听 change 事件
            .number - 输入字符串转为有效的数字
            .trim   - 输入首尾空格过滤

    7) 其他指令 （了解）
        v-pre: 不编译 直接当成字符串输出
        v-once: 只渲染一次
        v-cloak: 隐藏胡须表达式 直到数据渲染

6 事件 (掌握)
    1）语法：
        <标签 v-on:事件类型="函数名或者函数的调用"></标签>
        简写：
        <标签 @事件类型="函数名或者函数的调用"></标签>

    2) vue中的this指向当前实例对象

    3）事件对象 
        如果绑定的函数 直接写函数名 没有参 那么，在函数中可以直接获取事件对象
        如果绑定的函数 需要传参数，必须把 $event 传入 函数中才能获取到事件对象

    4) 事件修饰符
        <标签 @事件类型.修饰符="函数名或函数调用"></标签>

        .prevent  // 阻止默认行为
        .keycode  // 确定按了哪个键
        .enter    // 按了回车键

7 过滤器（掌握）
    1） 作用：在数据输出到页面之前，对数据再次进行格式化（对数据的格式 再处理一次）
    2） 语法：
        new Vue({
            el: '',  // 挂载dom
            data: {  // 准备数据
            },
            methods: { // 写函数
            },
            filters: { // 写过滤器 （写法和methods中的差不多）
                函数名 (val) {
                    // val 就是需要过滤的数据
                }
            }
        })

        使用
        {{ 变量 | 函数名 }}

8 计算属性
    1）作用： 所有的逻辑都写在一个函数里面，这个函数必须有返回值，那么直接可以在视图中
       使用这个函数的名字 （把函数名当成一个属性来用）

    2）写法和methods的写法一样，但是功能有区别，计算属性有依赖缓存，只有依赖的数据发生
       变化，才会重新计算，否则直接使用缓存。

    3）语法：
        new Vue({
            el: '',  // 挂载dom
            data: {  // 准备数据
            },
            methods: { // 写函数
            },
            filters: { // 写过滤器 （写法和methods中的差不多）
                函数名 (val) {
                    // val 就是需要过滤的数据
                }
            },
            computed: {
                函数名 () {
                    return 结果
                }
            }
        })

        使用：
            {{ 函数名 }}




    