1 术语
前端 vs 后端  专业技术人员
前端  html css js
后端  nodejs php java c# c++

前台 vs 后台  非专业
前台用户看到的内容
后台进行数据管理部分


2 nodejs介绍
2.1 为什么浏览器可以对js进行解析
由于浏览器包含了js v8引擎,它可以解析javascript代码
2.2nodejs产生?
美国程序 Ryan Dahl 瑞恩达尔  使用js来做后端语言,把googl chrome中js引擎抽取来,加上服务器端的应用功能
如文件操作,模块,os的api,网络通信,数据操作管理等功能.由此产生了一个新平台,叫nodejs
nodejs = js的执行环境  + 服务端的功能

2.3 服务器端与客户端的语言
客户端语言
html 结构层
css  样式层
js   交互层
服务器端语言
nodejs php java c++

总结:
1>所有代码都放在服务器上
2>浏览器访问时发送一个url到服务器端,服务器端响应一个页面
3>html css js 在浏览器上执行
4>nodejs php java 服务器端执行

2.4nodejs 与javascript的区别
javascript = ECMAscript + dom + bom
js是一门语言,只要有js引擎就可以运行,浏览器对es加文档的操作接口

nodejs = ECMAscript + 服务器端功能
nodejs是在es的基础上增加了服务器端功能

问:nodejs
window.alert("hello nodejs");
在nodejs中没有dom 和bom

总结: nodejs 是 es+服务器端的功能

3 nodejs准备
3.1 下载安装
中文：http://nodejs.cn/   
window  .msi格式的  选64位 安装包
mac os  .pkg文件

安装 

是否安装好的 win+ r => cmd  => 输入node 如果不报错,安装就成功了


扩充知识:环境变量
1> nodejs 不需要配置环境变量,已经自动配置好了

2> 位置：此电脑  右键 属性 => 高级系统设置 => 环境变量
打开对话框   上面是管理员   下面是系统变量  配置选择下面系统变量

3>如果说软件没有配置环境变量,只能在安装目录dos命令
环境变量的作用,是为了让所有的目录使用环境变量

如果出现报错: 不是内部或外部命令，也不是可运行的程序
或批处理文件。
原因:90% 环境变量没有配置,10%软件没有装好

进入dos快捷方式  上面地址栏中输入cmd就进dos

3.2常用dos命令
使用window系统有两种方式  一种是可视化 窗口  二是dos系统
1>进行dos界面 win + r =》 cmd
最快捷方式 地址栏中输入cmd就进dos

2>切换盘符
D:   E:
3>清屏
cls

4> 切换目录  
cd 相对目录 
cd ../上一级
cd ../../ 上一级的上一级
cd / 回到根目录
5>显示列表 
dir

3.3命令运行两种模式
dos模式
nodejs模式
dos模式 进行 node模式  node命令
nodejs模式 要退回dos模式 ctrl + c

3.4 运行nodejs的两种方式
一得命令行  直接在命令行输入js代码
二是在dos模式下 node  路径/文件名

在vscode编辑中打开dos界面 
ctrl + `(反引号)


4 commonjs规范
4.1 回顾规范
前端规范:
AMD Asynchronous Module definition 异步模块定义 由require.js
CMD common module definition  seajs来实现

后端
commonjs  由nodejs来实现

4.2作用
javascript定义api是基于浏览器的应用程序
commonjs定义二进制  编码 字符集  i/o fs文件系统 数据库的操作

5 nodejs的模块
5.1 模块的概念:
一个具有特定功能的js文件,功能越单一越好
将小的功能组织成子模块,用主模块将子模组织起来,子模块之间是相互独立
5.2模块的特征
1>模块中用var定义的变量是局部变量
2>模块中定义的函数是局部函数
3>模块中有一个模块对象  moduled exports
4>模块中要暴露属性和方法给外部使用
5>模块中使用require引入子模块

5.3优点
一是分工协作方便
二是便于后期维护  哪一个子模块有问题就维护哪一个子模块
三是可扩展 对模块的功能进行加强


举例:
需求:写三个子模块
login.js 登录子模块
show.js 子模块
say.js 子模块
一个主模块 main.js
主模块把三个子模块包含进来

        上午总结:
        1认识nodejs
        es执行环境抽来来 +服务器端的功能
        2 客户端语言  html css js
        服务器端  nodejs php java c# c++
        3 区别nodejs 与 javascript
        nodejs = es + 服务器端的功能
        javascript = es + dom + bom

        nodejs 中不再dom 和bom
        在nodejs中所有es的语法全部一样使用

        4 环境变量
        win7,用ctrl+c , ctrl+v 添加上面,不能把以前全删除,再添加上去
        作用:让所有的目录都可以识别dos命令
        位置:我的电脑 右键 属性=>高级系统设置 =>环境变量  弹出一个对话框
        上面的管理员变量
        下面是系统变量
        新建 把软件的安装路径复制进去,确认就可以了

        nodejs自动配置好环境变量 

        5 dos命令
        进入dos界面: 
        方法一:win + r =>cmd
        方法二:直接在地址栏输入cmd 也可以

        1> 切换盘符  C:  D: E:
        2> 清屏 cls
        3> 切换目录   cd 
            cd 目录 
            cd ../
            cd ../../
            cd /
        4> 查看目录中内容 
            dir 


        6命令的两模式
        dos界面 => nodejs ,只接输入node就可以了 
        nodejs界面 => dos界面 ,ctrl+c 

        7 运行nodejs代码两种方法
        第一种 行命令 不可以取
        第二种 node  路径/文件名.js

        8 commonjs 规范:
        由nodejs来实现
        定义:二进制 编码 字符集  i/o fs 数据的管理操作

        9 nodejs的模块
        1>概念  单一功能的js模块
        2>特征:
        模块中的变量是局部变量
        模块中定义的函数是局部函数
        模块中有moduled对象
        模块中还有exports导出对象
        引入模块require
        3>优点
        可维护
        可扩展
        可复用
        工作分工协作
        4>举例:
        子模块的语法
        定义函数
        function 函数名(){
            函数的功能代码
        }
        暴露出去
        exports.方法名 = 函数名; 

        主模块中
        var 变量名 = require("地址/模块文件名.js")
        //调用
        变量名.方法名()

        我们电脑现在装上nodejs就是一台服务器了
        服务端运行js文件,在浏览上是不可以运行
        浏览器就是客户端


6 模块的深化
6.1 在nodejs里面,所有变量和函数都是局部的,被包裹在一个看不见的函数里

在任何模块文件中
console.log(arguments.callee.toString())//打印出隐形函数
这个函数:
function (exports,require,module,__filename,__dirname){
里面定义局部的变量和函数
将变量和函数要暴露出去

}

exports  暴露对象,它指向对向的地址,真正暴露对象 module.exports
require  引入模块的函数 返回值是引入子模块暴露对象
module 模块,主要用到里面module.exports对象,它是真正的暴露对象
__filename 文件所有目录+文件名 就是一个地址
__dirname 文件所有的目录


小结:隐性函数中有五个参数:exports require module __filename  __dirname


6.2 require 
引入模块的函数  引入三种模块
1>引入文件模块  编程人员自已写的模块
var 变量名 = require("模块地址")
注意地址
2>引入系统内置模块  fs http https path url  //不需要下载
var 变量名 = require ("http")  
3>引入第三方模块(需要下载)
var 变量名 = require("第三方模块")

说明,下载第三方模块 npm
1>只在电脑安装了nodejs,就会自带npm
2>npm的位置,通过环境变量可以找到
3>测试一下 npm -v

第三方模块下载
命令 : npm install jquery
简写 npm  i 第三方的模块名

npm下载第三方模块时,会自动生成一个node_modules的一个文件夹

小结
require函数,它的作用引用模块
它可以引入三种模块
程序自己写模块,系统自带的模块,第三方模块
第三方模块下载:
npm 来下载
命令: npm i 第三方的模块名

6.3 exports对象
它里记录自己暴露出去方法和属性,
用法:
exports.方法名 = 函数名
exports.属性名 = 变量名

exports是形式的,真正的暴露对象 module.exports
exports是一个对象,可以往里面添加属性和方法

6.4 module.exports对象
它才是真正暴露出去对象
用法
module.exports.方法名 = 函数名
module.exports.属性名 = 变量名

module.exports与exports之间的区别
module.exports才是真正的暴露对象
exports是形式

module.exports.方法名 = 函数名 和 exports.方法名 = 函数名 效果是一样
module.exports = 函数名 和 exports = 函数名 情况就不一样
module.exports可以被赋值函数名或变量名或对象都可以
但exports=其它的数据是不可以的


7 包
7.1概念:每一个js文件是一个模块,存放这些模块的文件夹叫包
7.2包的管理
1>包描述文件
package.json
作用:记录项目所依赖的第三方模块名

命令 npm init -y 
不能有中文路径
如果有中文路径 npm init 一步一步向下安装

package.json可以记录下安装的第三方模块

把第三方模块要记录在package.json中
命令 npm i 第三方模块名  --save
"dependencies": { //依赖列表
    "jquery": "^3.3.1"
  }

如果node_modules被删除了
重新把所有依赖第三方模块安装
npm i

补充:
安装分类:
局部安装 , 安装一个某一个目录
上面的安装叫局部安装
全局安装
命令 npm i 模块 -g

2>常用的npm命令
npm init -y 生成包描述文件
npm i  第三方模块名 --save 
npm i 模块名 -g
npm remove 模块名 //删除模块
npm view 模块名 version 显示模块的当前版本
npm view 模块名 versions 显示模块的所有版本
npm update 模块名 //更新模块

小结:
包描述文件: package.json
作用:记录项目中所有的第三方依赖模块
生成的命令 npm init -y  //不能用中文件路径 
如果node_modules被删除了,用npm i把所有第三方模块重新安装

安装第三方模块的命令
npm i 模块名 --save

