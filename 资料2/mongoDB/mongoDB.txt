1 学习目标
    1）安装完成 MongoDB 数据库
    2）掌握数据库的基本操作（CRUD）=> (Create)增加  (Retrieve)查询  (Update)修改  (Delete)删除

2 什么是数据库？（了解）
    是按照数据结构来组织 存储 管理 数据的仓库。

3 数据库分类（了解）
    1） 关系型数据库
        关系型数据库 =》 表 =》 行 （字段数据）

        注意***： 关系型数据库 表和表之间 是由紧密的关联

    2） 非关系型数据库
        非关系型数据库 =》 集合（collection） =》 文档（bson格式的数据库）

        补充：bson = json + 二进制
        注意***： 集合和集合之间相互独立 没有关联

4 关系型数据库和非关系型数据库的优缺点（了解）
    1）非关系型数据库 性能强 （不需要经过SQL解析）
    2）非关系型数据库 方便扩展 （集合之间没有太强的耦合性）

    3）关系型数据库 复杂查询能力强
    4）关系型数据库 安全性 高

    非关系型数据库代表： MongoDB
    关系型数据库代表： MySQL  oracle

5 MongoDB的安装（4.0.4）
    1）单击安装文件 默认windows傻瓜式安装 （最好不要勾选 compass）

    2）安装完成以后 配置环境变量 
        要配置的目录：C:\Program Files\MongoDB\Server\4.0\bin
        电脑 =》 右键属性 =》 高级系统设置 =》 环境变量 =》 path

        用户的path： 当前用户有效
        系统的path： 当前操作系统有效

    3）win + r 进入dos 测试是否成功
        mongo     // 进入MongoDB数据库
        show dbs  // 显示当前有哪些数据库

6 系统有问题的 按照以下步骤安装 （3.2.9）
    1） 点击安装文件 windows傻瓜式安装
    2） 配置环境变量    
        C:\Program Files\MongoDB\Server\3.2\bin
    3） 新建两个文件夹 
        data 用于存储数据
        log 用于存储日志  log中需要新建一个文件  MongoDB.log
    4) 以“管理员”身份进入dos 运行以下命令 （启动数据库 且 把数据库安装为windows的服务）
        mongod  --storageEngine mmapv1 --dbpath "C:\Program Files\MongoDB\Server\3.2\data" --logpath "C:\Program Files\MongoDB\Server\3.2\log\MongoDB.log" --install --serviceName "MongoDB"
    5）启动服务
        net start MongoDB
    补充几个dos命令
        net stop MongoDB  // 停止服务
        sc delete MongoDB // 删除服务

7 MongoDB的基本使用（CRUD） （掌握）
    数据库 =》 集合 =》 JSON数据

    A 常用命令
        show dbs             // 显示当前有哪些数据库（数据库中至少有一条数据 才能被显示）
        db                   // 显示当前在哪个数据中
        db.集合名.find()      // 查看当前集合中所有数据
        show collections     // 查看当前数据库有哪些集合
        use 数据库名          // 创建数据库 （如果这个数据库已经存在 那么直接使用 否则 就自动创建再使用）

    B 增加数据 
        语法： 
            db.集合名.insert({key1:value1,  key1: value3})
            db.集合名.save({key1:value1,  key1: value3})

        // 示例：
        db.stu.insert({"name":"张三", "age": 19, "sex": "女"})
        db.stu.save({"name":"李四", "age": 20, "sex": "男"})

        区别： 如果插入的数据已经存在（id相同才叫存在），insert方法会报错，不能插入数据，
              而 save() 方法，会直接把原来的数据覆盖。

        // 插入一条id相同的数据
        db.stu.insert({"_id": ObjectId("5c9f0a2654f4dfd7bddc75f6"),"name":"老王", "age": 35, "sex": "男"}) // 报错
        db.stu.save({"_id": ObjectId("5c9f0a2654f4dfd7bddc75f6"),"name":"老王", "age": 35, "sex": "男"}) // 覆盖

    C 删除数据 
        1）删除文档（删JSON数据）
           a)  db.集合名.remove({})                // 删除集合中所有数据
           b)  db.集合名.remove({"key": "value"})  // 删除满足条件 key=value 的数据

        2）删除集合
           db.集合名.drop()

        3）删除数据库(慎重 ！！！ 先检查你当前在哪个数据库)
           db.runCommand({"dropDatabase": 1})

    D 修改数据 
        db.集合名.update({key: value}, {key: value}) // 第一个大括号是要修改的数据的查询条件 第二个是修改后的“新”内容
        示例：db.student.update({"name": "张三"}, {"sex": "女"}) 

        // 保留其他字段 （只是修改对应的字段）
        db.集合名.update({key: value}, {$set: { key: value }}) 
        示例： db.student.update({"name":"李四"}, {$set: { "sex":"不详"}})

    E 查询数据 
        db.集合名.find()           // 查询集合下所有数据
        db.集合名.find().pretty()  // 查询集合下所有数据 且 对查询结果格式化 （记住 字段多一些才有效果哦）
        db.集合名.findOne()        // 查询集合下的第一条数据


8 补充几个常用命令
    1) 排序
        db.集合名.sort({key: 1/-1})  1是升序 -1是降序

        代码： db.list.find().sort({"age": 1}) // 按照年龄  升序
        代码： db.list.find().sort({"age": -1}) // 按照年龄 降序

    2）limit(n)  // 限制输出 n 条
        代码： db.list.find().limit(2).pretty()

    3）skip（m） // 跳过 m 条 
        代码： db.list.find().skip(13).pretty()

补充扩展：（理解）
    分页的规律：
        每页多少条： pageSize
        当前页：    currentPage

        每页对应的数据如何查询：
        var n = (currentPage - 1) * pageSize
        skip( n ).limit( pageSize )

        假如： 7条数据 每页3条
        当前页            条件
         1               skip(0).limit(3)
         2               skip(3).limit(3)
         3               skip(6).limit(3)


         假如： 103条数据 每页10条 
         1               skip(0).limit(10)
         2               skip(10).limit(10)
         3               skip(20).limit(10)
         4               skip(30).limit(10)
         5               skip(40).limit(10)
         ...
         11              skip(100).limit(10)


    

